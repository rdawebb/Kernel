#!/bin/bash

# Test Suite Runner for Kernel Email Client
# Runs the complete test suite with options for different test scenarios
#
# Usage Examples:
#   ./test-suite              # Run all ~115 tests
#   ./test-suite verbose      # Run with detailed output
#   ./test-suite storage      # Run only storage/DB tests (10 tests)
#   ./test-suite config       # Run only config tests (15 tests)
#   ./test-suite connection   # Run only connection tests (18 tests)
#   ./test-suite imap         # Run only IMAP tests (18 tests)
#   ./test-suite smtp         # Run only SMTP tests (15 tests)
#   ./test-suite ui           # Run only UI tests (16 tests)
#   ./test-suite cli          # Run only CLI tests (8 tests)
#   ./test-suite composer     # Run only composer tests (15 tests)
#   ./test-suite count        # Show test statistics
#   ./test-suite help         # Show all options

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$SCRIPT_DIR"

echo -e "${BLUE}üß™ Kernel Email Client Test Suite Runner${NC}"
echo "Project directory: $PROJECT_DIR"
echo

# Change to project directory
cd "$PROJECT_DIR"

# Check if virtual environment exists and activate it
if [ -d ".venv" ]; then
    echo -e "${YELLOW}üì¶ Activating virtual environment...${NC}"
    source .venv/bin/activate
else
    echo -e "${YELLOW}‚ö†Ô∏è  No virtual environment found (.venv), using system Python${NC}"
fi

# Function to run tests with different options
run_tests() {
    local test_args="$1"
    local description="$2"
    
    echo -e "${BLUE}üîç Running: $description${NC}"
    echo "Command: python3 -m pytest $test_args"
    echo
    
    if python3 -m pytest $test_args; then
        echo -e "${GREEN}‚úÖ $description - PASSED${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $description - FAILED${NC}"
        return 1
    fi
}

# Parse command line arguments
case "${1:-all}" in
    "all"|"")
        echo -e "${YELLOW}Running complete test suite...${NC}"
        echo
        run_tests "--no-header --tb=short" "Complete Test Suite"
        ;;
    
    "verbose"|"-v")
        echo -e "${YELLOW}Running tests with verbose output...${NC}"
        echo
        run_tests "-v" "Verbose Test Suite"
        ;;
    
    "coverage"|"--coverage")
        echo -e "${YELLOW}Running tests with coverage report...${NC}"
        echo
        if command -v coverage &> /dev/null; then
            run_tests "--cov=src/tui_mail --cov-report=term-missing" "Test Suite with Coverage"
        else
            echo -e "${RED}‚ùå Coverage not installed. Install with: pip install pytest-cov${NC}"
            exit 1
        fi
        ;;
    
    "fast"|"--fast")
        echo -e "${YELLOW}Running fast tests (no slow integration tests)...${NC}"
        echo
        run_tests "-m 'not slow' --tb=line" "Fast Test Suite"
        ;;
    
    "connection"|"--connection")
        echo -e "${YELLOW}Running connection tests only...${NC}"
        echo
        run_tests "tests/test_connection.py -v" "Connection Tests"
        ;;
    
    "storage"|"--storage")
        echo -e "${YELLOW}Running storage/database tests only...${NC}"
        echo
        run_tests "tests/test_storage.py -v" "Storage Tests"
        ;;
    
    "config"|"--config")
        echo -e "${YELLOW}Running configuration tests only...${NC}"
        echo
        run_tests "tests/test_config.py -v" "Config Tests"
        ;;
    
    "imap"|"--imap")
        echo -e "${YELLOW}Running IMAP tests only...${NC}"
        echo
        run_tests "tests/test_imap_client.py -v" "IMAP Client Tests"
        ;;
    
    "smtp"|"--smtp")
        echo -e "${YELLOW}Running SMTP tests only...${NC}"
        echo
        run_tests "tests/test_smtp_client.py -v" "SMTP Client Tests"
        ;;
    
    "ui"|"--ui")
        echo -e "${YELLOW}Running UI tests only...${NC}"
        echo
        run_tests "tests/test_ui.py -v" "UI Component Tests"
        ;;
    
    "composer"|"--composer")
        echo -e "${YELLOW}Running composer tests only...${NC}"
        echo
        run_tests "tests/test_composer.py -v" "Email Composer Tests"
        ;;
    
    "cli"|"--cli")
        echo -e "${YELLOW}Running CLI tests only...${NC}"
        echo
        run_tests "tests/test_cli.py -v" "CLI Tests"
        ;;
    
    "unit"|"--unit")
        echo -e "${YELLOW}Running unit tests (excluding integration)...${NC}"
        echo
        run_tests "tests/ -v --ignore=tests/test_connection.py" "Unit Tests"
        ;;
    
    "count"|"--count")
        echo -e "${YELLOW}Counting tests...${NC}"
        echo
        total_tests=$(python3 -m pytest --collect-only -q tests/ 2>/dev/null | grep "test session starts" -A 1 | tail -1 | grep -o '[0-9]\+' | head -1)
        echo -e "${GREEN}üìä Total Tests: $total_tests${NC}"
        echo
        echo "Test breakdown by file:"
        for test_file in tests/test_*.py; do
            if [ -f "$test_file" ]; then
                count=$(grep -c "def test_" "$test_file" 2>/dev/null || echo "0")
                filename=$(basename "$test_file")
                echo "  $filename: $count tests"
            fi
        done
        ;;
    
    "help"|"--help"|"-h")
        echo -e "${BLUE}Usage: ./test-suite [OPTION]${NC}"
        echo
        echo "Options:"
        echo "  all, (default)     Run complete test suite (~115 tests)"
        echo "  verbose, -v        Run tests with verbose output"
        echo "  coverage           Run tests with coverage report"
        echo "  fast               Run fast tests only (exclude slow integration tests)"
        echo "  storage            Run storage/database tests only (10 tests)"
        echo "  config             Run configuration tests only (15 tests)"
        echo "  connection         Run connection tests only (18 tests)"
        echo "  imap               Run IMAP client tests only (18 tests)"
        echo "  smtp               Run SMTP client tests only (15 tests)"
        echo "  ui                 Run UI component tests only (16 tests)"
        echo "  composer           Run email composer tests only (15 tests)"
        echo "  cli                Run CLI tests only (8 tests)"
        echo "  unit               Run unit tests (exclude integration tests)"
        echo "  count              Count and display test statistics"
        echo "  help, -h           Show this help message"
        echo
        echo "Examples:"
        echo "  ./test-suite                 # Run all tests"
        echo "  ./test-suite verbose         # Run with verbose output"
        echo "  ./test-suite storage         # Run only storage tests"
        echo "  ./test-suite coverage        # Run with coverage report"
        ;;
    
    *)
        echo -e "${RED}‚ùå Unknown option: $1${NC}"
        echo "Use './test-suite help' to see available options"
        exit 1
        ;;
esac

echo
if [ $? -eq 0 ]; then
    echo -e "${GREEN}üéâ Test suite completed successfully!${NC}"
else
    echo -e "${RED}üí• Test suite failed!${NC}"
    exit 1
fi
